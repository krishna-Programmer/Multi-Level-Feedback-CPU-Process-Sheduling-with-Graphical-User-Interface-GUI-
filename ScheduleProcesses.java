/* Implementation in java language */
/* Main File for the application*/

package krishna;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author Krishna
 * krishnarao009@gmail.com
 */
public class ScheduleProcesses extends javax.swing.JFrame {

    int number_of_process;
    int process_count = 1;

    Queue<Process> Q0 = new LinkedList<>();
    Queue<Process> Q1 = new LinkedList<>();
    Queue<Process> Q2 = new LinkedList<>();
    ArrayList<Process> al = new ArrayList<>();
    Map<Integer, Process> processinfo = new LinkedHashMap<>();
    private int time = 0;
    int process_id = 0;

    /**
     * Creates new form ScheduleProcesses
     */
    public ScheduleProcesses() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultbox = new javax.swing.JTextArea();
        number_of_processes = new javax.swing.JTextField();
        number_of_processes_label = new javax.swing.JLabel();
        show_complete_status = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        process_id_text = new javax.swing.JTextField();
        process_burst_time_text = new javax.swing.JTextField();
        process_arrival_time_text = new javax.swing.JTextField();
        process_creation_label = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        create_process_button = new javax.swing.JButton();
        runbutton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        burst_time_range = new javax.swing.JTextField();
        arrival_time_range = new javax.swing.JTextField();
        create_process_random_button = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        resultbox.setColumns(20);
        resultbox.setRows(5);
        jScrollPane1.setViewportView(resultbox);

        number_of_processes.setText("20");
        number_of_processes.setPreferredSize(new java.awt.Dimension(50, 25));

        number_of_processes_label.setText("Enter Number of Processes");

        show_complete_status.setText("Show Complete Status");
        show_complete_status.setEnabled(false);
        show_complete_status.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                show_complete_statusMouseClicked(evt);
            }
        });

        reset.setText("Reset");
        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetMouseClicked(evt);
            }
        });

        jLabel2.setText("Process id");

        jLabel3.setText("Process burst time");

        jLabel4.setText("Process arrival time");

        process_id_text.setPreferredSize(new java.awt.Dimension(50, 25));

        process_burst_time_text.setPreferredSize(new java.awt.Dimension(50, 25));

        process_arrival_time_text.setMinimumSize(new java.awt.Dimension(50, 20));
        process_arrival_time_text.setPreferredSize(new java.awt.Dimension(50, 25));

        process_creation_label.setText("Enter the details of Process number:1");

        submit.setText("Submit");
        submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitMouseClicked(evt);
            }
        });

        create_process_button.setText("Create The Process");
        create_process_button.setEnabled(false);
        create_process_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                create_process_buttonMouseClicked(evt);
            }
        });

        runbutton.setText("Run");
        runbutton.setEnabled(false);
        runbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runbuttonMouseClicked(evt);
            }
        });

        jLabel1.setText("OR");

        jLabel5.setText("Enter the  below details to create processes  randomly");

        jLabel6.setText("Process burst time range");

        jLabel7.setText("Process arrival time range");

        burst_time_range.setPreferredSize(new java.awt.Dimension(50, 25));

        arrival_time_range.setMinimumSize(new java.awt.Dimension(50, 25));
        arrival_time_range.setPreferredSize(new java.awt.Dimension(50, 25));

        create_process_random_button.setText("Create Processes Randomly");
        create_process_random_button.setEnabled(false);
        create_process_random_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                create_process_random_buttonMouseClicked(evt);
            }
        });

        jLabel9.setText("ms");

        jLabel10.setText("ms");

        jLabel11.setText("ms");

        jLabel12.setText("ms");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(process_id_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(process_burst_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(process_arrival_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(number_of_processes_label)
                                        .addGap(18, 18, 18)
                                        .addComponent(number_of_processes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(process_creation_label)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(create_process_button)
                                                .addComponent(show_complete_status)
                                                .addComponent(create_process_random_button))
                                            .addGap(13, 13, 13)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(reset))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(submit))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(burst_time_range, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arrival_time_range, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(runbutton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(number_of_processes_label)
                            .addComponent(number_of_processes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(submit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(process_creation_label)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(process_id_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(process_burst_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(process_arrival_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(create_process_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(burst_time_range, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(arrival_time_range, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(create_process_random_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(runbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(show_complete_status)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reset))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {

    }

    private void show_complete_statusMouseClicked(java.awt.event.MouseEvent evt) {

        JFrame completestatusframe = new javax.swing.JFrame();
        completestatusframe.setAlwaysOnTop(true);
        JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        JTable completestatustable = new javax.swing.JTable();
        completestatustable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Process Id", "Process Burst Time(ms)", "Process Arrival Time(ms)", "Process Start Time(ms)", "Process Response Time(ms)", "Process Completed Time(ms)", "Process Turnaround Time(ms)", "Process Waiting Time(ms)"
                }
        ));
        DefaultTableModel model = (DefaultTableModel) completestatustable.getModel();
       double Ttat = 0, Twt = 0, Trt = 0;

        if (Q0.isEmpty() && Q1.isEmpty() && Q2.isEmpty()) {
            for (Map.Entry m : processinfo.entrySet()) {
                Process p = (Process) m.getValue();
                Ttat = Ttat + p.process_turn_around_time;
                Twt = Twt + p.process_wait_time;
                Trt = Trt + p.process_response_time;
                model.addRow(new Integer[]{p.process_id, p.process_burst_time, p.process_arrival_time, p.process_start_time, p.process_response_time, p.process_completed_time, p.process_turn_around_time, p.process_wait_time});
            }
            TableRowSorter sorter = new TableRowSorter(model);
            completestatustable.setAutoCreateRowSorter(true);
            jScrollPane2.setViewportView(completestatustable);
            jScrollPane2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            jScrollPane2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            completestatusframe.add(jScrollPane2);
            completestatusframe.setSize(500, 500);
            completestatusframe.setVisible(true);
            JTextArea formulas = new JTextArea();
            formulas.setForeground(Color.RED);
            formulas.append("Average Resonse Time:" + Trt / number_of_process+"ms");
            formulas.append(System.lineSeparator());
            formulas.append("Average Turnaround Time:" + Ttat / number_of_process+"ms");
            formulas.append(System.lineSeparator());
            formulas.append("Average Wait Time:" + Twt / number_of_process+"ms");
            formulas.append(System.lineSeparator());
            formulas.append("Response Time=Arrival time - Start Time");
            formulas.append(System.lineSeparator());
            formulas.append("Turnaround Time= Completed Time - Arrival time");
            formulas.append(System.lineSeparator());
            formulas.append("Wait Time= Turnaround Time - Burst time");
            formulas.append(System.lineSeparator());
            formulas.append("Average Turnaround Time= Total Turnaround time of all processes/number of processes");
            formulas.append(System.lineSeparator());
            formulas.append("Average Response Time= Total Response time of all processes/number of processes");
            formulas.append(System.lineSeparator());
            formulas.append("Average Wait Time= Total Wait time of all processes/number of processes");
            formulas.append(System.lineSeparator());
            formulas.append(System.lineSeparator());
            completestatusframe.add(formulas, BorderLayout.SOUTH);
        }

    }

    private void resetMouseClicked(java.awt.event.MouseEvent evt) {
        resultbox.setText("");
        processinfo = null;
        processinfo = new LinkedHashMap<>();
        al=null;
        al=new ArrayList<>();
        Q0=new LinkedList<>();
        Q1=new LinkedList<>();
        Q2=new LinkedList<>();
        time = 0;
        process_count = 1;
        process_id = 0;
        
        number_of_processes.setEnabled(true);
        submit.setEnabled(true);

        process_creation_label.setText("Enter the details of process number:" + process_count);
        process_id_text.setText("");
        process_arrival_time_text.setText("");
        process_burst_time_text.setText("");

        if (submit.isEnabled() == false) {
            create_process_button.setEnabled(true);
            create_process_random_button.setEnabled(true);
        }

        runbutton.setEnabled(false);
        show_complete_status.setEnabled(false);


    }

    private void create_process_buttonMouseClicked(java.awt.event.MouseEvent evt) {

        int pid = Integer.parseInt(process_id_text.getText());
        int at = Integer.parseInt(process_arrival_time_text.getText());
        int bt = Integer.parseInt(process_burst_time_text.getText());
        Process process = new Process(pid, at, bt, bt);

        al.add(process);

        processinfo.put(pid, process);
        process_id_text.setText("");
        process_arrival_time_text.setText("");
        process_burst_time_text.setText("");
        process_count++;
        process_creation_label.setText("Enter the details of process number:" + process_count);
        if (process_count == number_of_process + 1) {

            create_process_button.setEnabled(false);
            create_process_random_button.setEnabled(false);
            runbutton.setEnabled(true);
            Collections.sort(al);
            for (Process p : al) {
                Q0.add(p);
                resultbox.append(p.toString() + "is added to Q0");
                resultbox.append(System.lineSeparator());
            }

        }

    }

    private void submitMouseClicked(java.awt.event.MouseEvent evt) {
        number_of_process = Integer.parseInt(number_of_processes.getText());
        number_of_processes.setEnabled(false);
        submit.setEnabled(false);
        create_process_button.setEnabled(true);
        create_process_random_button.setEnabled(true);


    }

    private void runbuttonMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            runprocess();
        } catch (IOException ex) {

        }
    }

    private void create_process_random_buttonMouseClicked(java.awt.event.MouseEvent evt) {
        for (int i = 1; i <= number_of_process; i++) {
            int pid = ++process_id;
            Random rn = new Random();
            int at = rn.nextInt(Integer.parseInt(arrival_time_range.getText())) + 1;
            int bt = rn.nextInt(Integer.parseInt(burst_time_range.getText())) + 1;
            Process process = new Process(pid, at, bt, bt);
            al.add(process);
            processinfo.put(pid, process);
            process_count++;
        }
        create_process_button.setEnabled(false);
        create_process_random_button.setEnabled(false);
        Collections.sort(al);
        for (Process p : al) {
            Q0.add(p);
            resultbox.append(p.toString() + "is added to Q0");
            resultbox.append(System.lineSeparator());
        }
        runbutton.setEnabled(true);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {

        } catch (InstantiationException ex) {

        } catch (IllegalAccessException ex) {

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {

        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScheduleProcesses ScheduleProcesses = new ScheduleProcesses();
                ScheduleProcesses.setVisible(true);
                ScheduleProcesses.addWindowListener(new WindowAdapter() {
                    public void windowClosing(WindowEvent e) {

                    }
                });
            }
        });
    }

   
    private javax.swing.JTextField arrival_time_range;
    private javax.swing.JTextField burst_time_range;
    private javax.swing.JButton create_process_button;
    private javax.swing.JButton create_process_random_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField number_of_processes;
    private javax.swing.JLabel number_of_processes_label;
    private javax.swing.JTextField process_arrival_time_text;
    private javax.swing.JTextField process_burst_time_text;
    private javax.swing.JLabel process_creation_label;
    private javax.swing.JTextField process_id_text;
    private javax.swing.JButton reset;
    private javax.swing.JTextArea resultbox;
    private javax.swing.JButton runbutton;
    private javax.swing.JButton show_complete_status;
    private javax.swing.JButton submit;
   

    private void runprocess() throws IOException {

        Process process = null;
        while (!(Q0.isEmpty() && Q1.isEmpty() && Q2.isEmpty())) {
            if (!Q0.isEmpty()) {
                if ((process = Q0.poll()) != null) {
                    while (process.process_arrival_time > time) {
                        time++;
                    }

                    process.process_start_time = time;
                    process.process_response_time = process.process_start_time - process.process_arrival_time;
                    resultbox.append(process.toString() + "is started execution");
                    resultbox.append(System.lineSeparator());
                    for (int i = 1; i <= 10; i++) {
                        time++;
                        process.process_remaining_time = --process.process_remaining_time;

                        if (process.process_remaining_time == 0) {
                            resultbox.append(process.toString() + " is completed");
                            resultbox.append(System.lineSeparator());
                            process.process_completed_time = time;
                            process.process_turn_around_time = process.process_completed_time - process.process_arrival_time;
                            process.process_wait_time = process.process_turn_around_time - process.process_burst_time;

                            break;
                        }

                    }
                    if (process.process_remaining_time > 0) {

                        Q1.add(process);
                        resultbox.append(process.toString() + " is added to Q1");
                        resultbox.append(System.lineSeparator());
                    }

                }
            } else if (Q0.isEmpty() && !Q1.isEmpty()) {
                if ((process = Q1.poll()) != null) {

                    for (int j = 1; j <=20; j++) {
                        time++;
                        process.process_remaining_time = --process.process_remaining_time;

                        if (process.process_remaining_time == 0) {

                            resultbox.append(process.toString() + " is completed");
                            resultbox.append(System.lineSeparator());
                            process.process_completed_time = time;
                            process.process_turn_around_time = process.process_completed_time - process.process_arrival_time;
                            process.process_wait_time = process.process_turn_around_time - process.process_burst_time;
                            break;
                        }

                    }
                    if (process.process_remaining_time > 0) {

                        Q2.add(process);
                        resultbox.append(process.toString() + " is added to Q2");
                        resultbox.append(System.lineSeparator());

                    }

                }
            } else if (Q0.isEmpty() && Q1.isEmpty() && !Q2.isEmpty()) {
                if ((process = Q2.poll()) != null) {

                    while (true) {
                        time++;
                        process.process_remaining_time = --process.process_remaining_time;

                        if (process.process_remaining_time == 0) {

                            resultbox.append(process.toString() + " is completed");
                            resultbox.append(System.lineSeparator());
                            process.process_completed_time = time;
                            process.process_turn_around_time = process.process_completed_time - process.process_arrival_time;
                            process.process_wait_time = process.process_turn_around_time - process.process_burst_time;
                            break;
                        }

                    }

                }
            }

        }
        show_complete_status.setEnabled(true);
        runbutton.setEnabled(false);

    }

}
